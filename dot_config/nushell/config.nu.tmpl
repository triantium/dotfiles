# Nushell Config File
#
# version = "0.92.2"

# For more information on defining custom themes, see
# https{{ .chezmoi.pathListSeparator }}{{ .chezmoi.pathSeparator }}{{ .chezmoi.pathSeparator }}www.nushell.sh{{ .chezmoi.pathSeparator }}book{{ .chezmoi.pathSeparator }}coloring_and_theming.html
# And here is the theme collection
# https{{ .chezmoi.pathListSeparator }}{{ .chezmoi.pathSeparator }}{{ .chezmoi.pathSeparator }}github.com{{ .chezmoi.pathSeparator }}nushell{{ .chezmoi.pathSeparator }}nu_scripts{{ .chezmoi.pathSeparator }}tree{{ .chezmoi.pathSeparator }}main{{ .chezmoi.pathSeparator }}themes
let dark_theme = {
    # color for nushell primitives
    separator{{ .chezmoi.pathListSeparator }} white
    leading_trailing_space_bg{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} n } # no fg, no bg, attr none effectively turns this off
    header{{ .chezmoi.pathListSeparator }} green_bold
    empty{{ .chezmoi.pathListSeparator }} blue
    # Closures can be used to choose colors for specific values.
    # The value (in this case, a bool) is piped into the closure.
    # eg) {|| if $in { 'light_cyan' } else { 'light_gray' } }
    bool{{ .chezmoi.pathListSeparator }} light_cyan
    int{{ .chezmoi.pathListSeparator }} white
    filesize{{ .chezmoi.pathListSeparator }} cyan
    duration{{ .chezmoi.pathListSeparator }} white
    date{{ .chezmoi.pathListSeparator }} purple
    range{{ .chezmoi.pathListSeparator }} white
    float{{ .chezmoi.pathListSeparator }} white
    string{{ .chezmoi.pathListSeparator }} white
    nothing{{ .chezmoi.pathListSeparator }} white
    binary{{ .chezmoi.pathListSeparator }} white
    cell-path{{ .chezmoi.pathListSeparator }} white
    row_index{{ .chezmoi.pathListSeparator }} green_bold
    record{{ .chezmoi.pathListSeparator }} white
    list{{ .chezmoi.pathListSeparator }} white
    block{{ .chezmoi.pathListSeparator }} white
    hints{{ .chezmoi.pathListSeparator }} dark_gray
    search_result{{ .chezmoi.pathListSeparator }} { bg{{ .chezmoi.pathListSeparator }} red fg{{ .chezmoi.pathListSeparator }} white }
    shape_and{{ .chezmoi.pathListSeparator }} purple_bold
    shape_binary{{ .chezmoi.pathListSeparator }} purple_bold
    shape_block{{ .chezmoi.pathListSeparator }} blue_bold
    shape_bool{{ .chezmoi.pathListSeparator }} light_cyan
    shape_closure{{ .chezmoi.pathListSeparator }} green_bold
    shape_custom{{ .chezmoi.pathListSeparator }} green
    shape_datetime{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_directory{{ .chezmoi.pathListSeparator }} cyan
    shape_external{{ .chezmoi.pathListSeparator }} cyan
    shape_externalarg{{ .chezmoi.pathListSeparator }} green_bold
    shape_external_resolved{{ .chezmoi.pathListSeparator }} light_yellow_bold
    shape_filepath{{ .chezmoi.pathListSeparator }} cyan
    shape_flag{{ .chezmoi.pathListSeparator }} blue_bold
    shape_float{{ .chezmoi.pathListSeparator }} purple_bold
    # shapes are used to change the cli syntax highlighting
    shape_garbage{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} white bg{{ .chezmoi.pathListSeparator }} red attr{{ .chezmoi.pathListSeparator }} b}
    shape_globpattern{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_int{{ .chezmoi.pathListSeparator }} purple_bold
    shape_internalcall{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_keyword{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_list{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_literal{{ .chezmoi.pathListSeparator }} blue
    shape_match_pattern{{ .chezmoi.pathListSeparator }} green
    shape_matching_brackets{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} u }
    shape_nothing{{ .chezmoi.pathListSeparator }} light_cyan
    shape_operator{{ .chezmoi.pathListSeparator }} yellow
    shape_or{{ .chezmoi.pathListSeparator }} purple_bold
    shape_pipe{{ .chezmoi.pathListSeparator }} purple_bold
    shape_range{{ .chezmoi.pathListSeparator }} yellow_bold
    shape_record{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_redirection{{ .chezmoi.pathListSeparator }} purple_bold
    shape_signature{{ .chezmoi.pathListSeparator }} green_bold
    shape_string{{ .chezmoi.pathListSeparator }} green
    shape_string_interpolation{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_table{{ .chezmoi.pathListSeparator }} blue_bold
    shape_variable{{ .chezmoi.pathListSeparator }} purple
    shape_vardecl{{ .chezmoi.pathListSeparator }} purple
}

let light_theme = {
    # color for nushell primitives
    separator{{ .chezmoi.pathListSeparator }} dark_gray
    leading_trailing_space_bg{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} n } # no fg, no bg, attr none effectively turns this off
    header{{ .chezmoi.pathListSeparator }} green_bold
    empty{{ .chezmoi.pathListSeparator }} blue
    # Closures can be used to choose colors for specific values.
    # The value (in this case, a bool) is piped into the closure.
    # eg) {|| if $in { 'dark_cyan' } else { 'dark_gray' } }
    bool{{ .chezmoi.pathListSeparator }} dark_cyan
    int{{ .chezmoi.pathListSeparator }} dark_gray
    filesize{{ .chezmoi.pathListSeparator }} cyan_bold
    duration{{ .chezmoi.pathListSeparator }} dark_gray
    date{{ .chezmoi.pathListSeparator }} purple
    range{{ .chezmoi.pathListSeparator }} dark_gray
    float{{ .chezmoi.pathListSeparator }} dark_gray
    string{{ .chezmoi.pathListSeparator }} dark_gray
    nothing{{ .chezmoi.pathListSeparator }} dark_gray
    binary{{ .chezmoi.pathListSeparator }} dark_gray
    cell-path{{ .chezmoi.pathListSeparator }} dark_gray
    row_index{{ .chezmoi.pathListSeparator }} green_bold
    record{{ .chezmoi.pathListSeparator }} dark_gray
    list{{ .chezmoi.pathListSeparator }} dark_gray
    block{{ .chezmoi.pathListSeparator }} dark_gray
    hints{{ .chezmoi.pathListSeparator }} dark_gray
    search_result{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} white bg{{ .chezmoi.pathListSeparator }} red }
    shape_and{{ .chezmoi.pathListSeparator }} purple_bold
    shape_binary{{ .chezmoi.pathListSeparator }} purple_bold
    shape_block{{ .chezmoi.pathListSeparator }} blue_bold
    shape_bool{{ .chezmoi.pathListSeparator }} light_cyan
    shape_closure{{ .chezmoi.pathListSeparator }} green_bold
    shape_custom{{ .chezmoi.pathListSeparator }} green
    shape_datetime{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_directory{{ .chezmoi.pathListSeparator }} cyan
    shape_external{{ .chezmoi.pathListSeparator }} cyan
    shape_externalarg{{ .chezmoi.pathListSeparator }} green_bold
    shape_external_resolved{{ .chezmoi.pathListSeparator }} light_purple_bold
    shape_filepath{{ .chezmoi.pathListSeparator }} cyan
    shape_flag{{ .chezmoi.pathListSeparator }} blue_bold
    shape_float{{ .chezmoi.pathListSeparator }} purple_bold
    # shapes are used to change the cli syntax highlighting
    shape_garbage{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} white bg{{ .chezmoi.pathListSeparator }} red attr{{ .chezmoi.pathListSeparator }} b}
    shape_globpattern{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_int{{ .chezmoi.pathListSeparator }} purple_bold
    shape_internalcall{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_keyword{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_list{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_literal{{ .chezmoi.pathListSeparator }} blue
    shape_match_pattern{{ .chezmoi.pathListSeparator }} green
    shape_matching_brackets{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} u }
    shape_nothing{{ .chezmoi.pathListSeparator }} light_cyan
    shape_operator{{ .chezmoi.pathListSeparator }} yellow
    shape_or{{ .chezmoi.pathListSeparator }} purple_bold
    shape_pipe{{ .chezmoi.pathListSeparator }} purple_bold
    shape_range{{ .chezmoi.pathListSeparator }} yellow_bold
    shape_record{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_redirection{{ .chezmoi.pathListSeparator }} purple_bold
    shape_signature{{ .chezmoi.pathListSeparator }} green_bold
    shape_string{{ .chezmoi.pathListSeparator }} green
    shape_string_interpolation{{ .chezmoi.pathListSeparator }} cyan_bold
    shape_table{{ .chezmoi.pathListSeparator }} blue_bold
    shape_variable{{ .chezmoi.pathListSeparator }} purple
    shape_vardecl{{ .chezmoi.pathListSeparator }} purple
}

# External completer example
# let carapace_completer = {|spans|
#     carapace $spans.0 nushell ...$spans | from {{ .chezmoi.config.format }}
# }

# The default config record. This is where much of your global configuration is setup.
$env.config = {
    show_banner{{ .chezmoi.pathListSeparator }} true # true or false to enable or disable the welcome banner at startup

    ls{{ .chezmoi.pathListSeparator }} {
        use_ls_colors{{ .chezmoi.pathListSeparator }} true # use the LS_COLORS environment variable to colorize output
        clickable_links{{ .chezmoi.pathListSeparator }} true # enable or disable clickable links. Your terminal has to support links.
    }

    rm{{ .chezmoi.pathListSeparator }} {
        always_trash{{ .chezmoi.pathListSeparator }} false # always act as if -t was given. Can be overridden with -p
    }

    table{{ .chezmoi.pathListSeparator }} {
        mode{{ .chezmoi.pathListSeparator }} rounded # basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other
        index_mode{{ .chezmoi.pathListSeparator }} always # "always" show indexes, "never" show indexes, "{{ .chezmoi.config.color }}" = show indexes when a table has "index" column
        show_empty{{ .chezmoi.pathListSeparator }} true # show 'empty list' and 'empty record' placeholders for command output
        padding{{ .chezmoi.pathListSeparator }} { left{{ .chezmoi.pathListSeparator }} 1, right{{ .chezmoi.pathListSeparator }} 1 } # a left right padding of each column in a table
        trim{{ .chezmoi.pathListSeparator }} {
            methodology{{ .chezmoi.pathListSeparator }} wrapping # wrapping or truncating
            wrapping_try_keep_words{{ .chezmoi.pathListSeparator }} true # A strategy used by the 'wrapping' methodology
            truncating_suffix{{ .chezmoi.pathListSeparator }} "..." # A suffix used by the 'truncating' methodology
        }
        header_on_separator{{ .chezmoi.pathListSeparator }} false # show header text on separator{{ .chezmoi.pathSeparator }}border line
        # abbreviated_row_count{{ .chezmoi.pathListSeparator }} 10 # limit data rows from top and bottom after reaching a set point
    }

    error_style{{ .chezmoi.pathListSeparator }} "fancy" # "fancy" or "plain" for screen reader-friendly error messages

    # datetime_format determines what a datetime rendered in the shell would look like.
    # Behavior without this configuration point will be to "humanize" the datetime display,
    # showing something like "a day ago."
    datetime_format{{ .chezmoi.pathListSeparator }} {
        # normal{{ .chezmoi.pathListSeparator }} '%a, %d %b %Y %H{{ .chezmoi.pathListSeparator }}%M{{ .chezmoi.pathListSeparator }}%S %z'    # shows up in displays of variables or other datetime's outside of tables
        # table{{ .chezmoi.pathListSeparator }} '%m{{ .chezmoi.pathSeparator }}%d{{ .chezmoi.pathSeparator }}%y %I{{ .chezmoi.pathListSeparator }}%M{{ .chezmoi.pathListSeparator }}%S%p'          # generally shows up in tabular outputs such as ls. commenting this out will change it to the default human readable datetime format
    }

    explore{{ .chezmoi.pathListSeparator }} {
        status_bar_background{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} "#1D1F21", bg{{ .chezmoi.pathListSeparator }} "#C4C9C6" },
        command_bar_text{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} "#C4C9C6" },
        highlight{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} "black", bg{{ .chezmoi.pathListSeparator }} "yellow" },
        status{{ .chezmoi.pathListSeparator }} {
            error{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} "white", bg{{ .chezmoi.pathListSeparator }} "red" },
            warn{{ .chezmoi.pathListSeparator }} {}
            info{{ .chezmoi.pathListSeparator }} {}
        },
        table{{ .chezmoi.pathListSeparator }} {
            split_line{{ .chezmoi.pathListSeparator }} { fg{{ .chezmoi.pathListSeparator }} "#404040" },
            selected_cell{{ .chezmoi.pathListSeparator }} { bg{{ .chezmoi.pathListSeparator }} light_blue },
            selected_row{{ .chezmoi.pathListSeparator }} {},
            selected_column{{ .chezmoi.pathListSeparator }} {},
        },
    }

    history{{ .chezmoi.pathListSeparator }} {
        max_size{{ .chezmoi.pathListSeparator }} 100_000 # Session has to be reloaded for this to take effect
        sync_on_enter{{ .chezmoi.pathListSeparator }} true # Enable to share history between multiple sessions, else you have to close the session to write history to {{ .chezmoi.config.mode }}
        {{ .chezmoi.config.mode }}_format{{ .chezmoi.pathListSeparator }} "plaintext" # "sqlite" or "plaintext"
        isolation{{ .chezmoi.pathListSeparator }} false # only available with sqlite {{ .chezmoi.config.mode }}_format. true enables history isolation, false disables it. true will allow the history to be isolated to the current session using up{{ .chezmoi.pathSeparator }}down arrows. false will allow the history to be shared across all sessions.
    }

    completions{{ .chezmoi.pathListSeparator }} {
        case_sensitive{{ .chezmoi.pathListSeparator }} false # set to true to enable case-sensitive completions
        quick{{ .chezmoi.pathListSeparator }} true    # set this to false to prevent {{ .chezmoi.config.color }}-selecting completions when only one remains
        partial{{ .chezmoi.pathListSeparator }} true    # set this to false to prevent partial filling of the prompt
        algorithm{{ .chezmoi.pathListSeparator }} "prefix"    # prefix or fuzzy
        external{{ .chezmoi.pathListSeparator }} {
            enable{{ .chezmoi.pathListSeparator }} true # set to false to prevent nushell looking into $env.PATH to find more suggestions, `false` recommended for WSL users as this look up may be very slow
            max_results{{ .chezmoi.pathListSeparator }} 100 # setting it lower can improve completion performance at the cost of omitting some options
            completer{{ .chezmoi.pathListSeparator }} null # check 'carapace_completer' above as an example
        }
        use_ls_colors{{ .chezmoi.pathListSeparator }} true # set this to true to enable {{ .chezmoi.config.mode }}{{ .chezmoi.pathSeparator }}path{{ .chezmoi.pathSeparator }}directory completions using LS_COLORS
    }

    filesize{{ .chezmoi.pathListSeparator }} {
        metric{{ .chezmoi.pathListSeparator }} false # true => KB, MB, GB (ISO standard), false => KiB, MiB, GiB (Windows standard)
        format{{ .chezmoi.pathListSeparator }} "{{ .chezmoi.config.color }}" # b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, {{ .chezmoi.config.color }}
    }

    cursor_shape{{ .chezmoi.pathListSeparator }} {
        emacs{{ .chezmoi.pathListSeparator }} line # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (line is the default)
        vi_insert{{ .chezmoi.pathListSeparator }} block # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (block is the default)
        vi_normal{{ .chezmoi.pathListSeparator }} underscore # block, underscore, line, blink_block, blink_underscore, blink_line, inherit to skip setting cursor shape (underscore is the default)
    }

    color_config{{ .chezmoi.pathListSeparator }} $dark_theme # if you want a more interesting theme, you can replace the empty record with `$dark_theme`, `$light_theme` or another custom record
    use_grid_icons{{ .chezmoi.pathListSeparator }} true
    footer_mode{{ .chezmoi.pathListSeparator }} "25" # always, never, number_of_rows, {{ .chezmoi.config.color }}
    float_precision{{ .chezmoi.pathListSeparator }} 2 # the precision for displaying floats in tables
    buffer_editor{{ .chezmoi.pathListSeparator }} "" # command that will be used to edit the current line buffer with ctrl+o, if unset fallback to $env.EDITOR and $env.VISUAL
    use_ansi_coloring{{ .chezmoi.pathListSeparator }} true
    bracketed_paste{{ .chezmoi.pathListSeparator }} true # enable bracketed paste, currently useless on windows
    edit_mode{{ .chezmoi.pathListSeparator }} emacs # emacs, vi
    shell_integration{{ .chezmoi.pathListSeparator }} false # enables terminal shell integration. Off by default, as some terminals have issues with this.
    render_right_prompt_on_last_line{{ .chezmoi.pathListSeparator }} false # true or false to enable or disable right prompt to be rendered on last line of the prompt.
    use_kitty_protocol{{ .chezmoi.pathListSeparator }} false # enables keyboard enhancement protocol implemented by kitty console, only if your terminal support this.
    highlight_resolved_externals{{ .chezmoi.pathListSeparator }} false # true enables highlighting of external commands in the repl resolved by which.
    recursion_limit{{ .chezmoi.pathListSeparator }} 50 # the maximum number of times nushell allows recursion before stopping it

    plugins{{ .chezmoi.pathListSeparator }} {} # Per-plugin configuration. See https{{ .chezmoi.pathListSeparator }}{{ .chezmoi.pathSeparator }}{{ .chezmoi.pathSeparator }}www.nushell.sh{{ .chezmoi.pathSeparator }}contributor-book{{ .chezmoi.pathSeparator }}plugins.html#configuration.

    plugin_gc{{ .chezmoi.pathListSeparator }} {
        # Configuration for plugin garbage collection
        default{{ .chezmoi.pathListSeparator }} {
            enabled{{ .chezmoi.pathListSeparator }} true # true to enable stopping of inactive plugins
            stop_after{{ .chezmoi.pathListSeparator }} 10sec # how long to wait after a plugin is inactive to stop it
        }
        plugins{{ .chezmoi.pathListSeparator }} {
            # alternate configuration for specific plugins, by name, for example{{ .chezmoi.pathListSeparator }}
            #
            # gstat{{ .chezmoi.pathListSeparator }} {
            #     enabled{{ .chezmoi.pathListSeparator }} false
            # }
        }
    }

    hooks{{ .chezmoi.pathListSeparator }} {
        pre_prompt{{ .chezmoi.pathListSeparator }} [{ null }] # run before the prompt is shown
        pre_execution{{ .chezmoi.pathListSeparator }} [{ null }] # run before the repl input is run
        env_change{{ .chezmoi.pathListSeparator }} {
            PWD{{ .chezmoi.pathListSeparator }} [{|before, after| null }] # run if the PWD environment is different since the last repl input
        }
        display_output{{ .chezmoi.pathListSeparator }} "if (term size).columns >= 100 { table -e } else { table }" # run to display the output of a pipeline
        command_not_found{{ .chezmoi.pathListSeparator }} { null } # return an error message when a command is not found
    }

    menus{{ .chezmoi.pathListSeparator }} [
        # Configuration for default nushell menus
        # Note the lack of source parameter
        {
            name{{ .chezmoi.pathListSeparator }} completion_menu
            only_buffer_difference{{ .chezmoi.pathListSeparator }} false
            marker{{ .chezmoi.pathListSeparator }} "| "
            type{{ .chezmoi.pathListSeparator }} {
                layout{{ .chezmoi.pathListSeparator }} columnar
                columns{{ .chezmoi.pathListSeparator }} 4
                col_width{{ .chezmoi.pathListSeparator }} 20     # Optional value. If missing all the screen width is used to calculate column width
                col_padding{{ .chezmoi.pathListSeparator }} 2
            }
            style{{ .chezmoi.pathListSeparator }} {
                text{{ .chezmoi.pathListSeparator }} green
                selected_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} r }
                description_text{{ .chezmoi.pathListSeparator }} yellow
                match_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} u }
                selected_match_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} ur }
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} ide_completion_menu
            only_buffer_difference{{ .chezmoi.pathListSeparator }} false
            marker{{ .chezmoi.pathListSeparator }} "| "
            type{{ .chezmoi.pathListSeparator }} {
                layout{{ .chezmoi.pathListSeparator }} ide
                min_completion_width{{ .chezmoi.pathListSeparator }} 0,
                max_completion_width{{ .chezmoi.pathListSeparator }} 50,
                max_completion_height{{ .chezmoi.pathListSeparator }} 10, # will be limited by the available lines in the terminal
                padding{{ .chezmoi.pathListSeparator }} 0,
                border{{ .chezmoi.pathListSeparator }} true,
                cursor_offset{{ .chezmoi.pathListSeparator }} 0,
                description_mode{{ .chezmoi.pathListSeparator }} "prefer_right"
                min_description_width{{ .chezmoi.pathListSeparator }} 0
                max_description_width{{ .chezmoi.pathListSeparator }} 50
                max_description_height{{ .chezmoi.pathListSeparator }} 10
                description_offset{{ .chezmoi.pathListSeparator }} 1
                # If true, the cursor pos will be corrected, so the suggestions match up with the typed text
                #
                # C{{ .chezmoi.pathListSeparator }}\> str
                #      str join
                #      str trim
                #      str split
                correct_cursor_pos{{ .chezmoi.pathListSeparator }} false
            }
            style{{ .chezmoi.pathListSeparator }} {
                text{{ .chezmoi.pathListSeparator }} green
                selected_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} r }
                description_text{{ .chezmoi.pathListSeparator }} yellow
                match_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} u }
                selected_match_text{{ .chezmoi.pathListSeparator }} { attr{{ .chezmoi.pathListSeparator }} ur }
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} history_menu
            only_buffer_difference{{ .chezmoi.pathListSeparator }} true
            marker{{ .chezmoi.pathListSeparator }} "? "
            type{{ .chezmoi.pathListSeparator }} {
                layout{{ .chezmoi.pathListSeparator }} list
                page_size{{ .chezmoi.pathListSeparator }} 10
            }
            style{{ .chezmoi.pathListSeparator }} {
                text{{ .chezmoi.pathListSeparator }} green
                selected_text{{ .chezmoi.pathListSeparator }} green_reverse
                description_text{{ .chezmoi.pathListSeparator }} yellow
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} help_menu
            only_buffer_difference{{ .chezmoi.pathListSeparator }} true
            marker{{ .chezmoi.pathListSeparator }} "? "
            type{{ .chezmoi.pathListSeparator }} {
                layout{{ .chezmoi.pathListSeparator }} description
                columns{{ .chezmoi.pathListSeparator }} 4
                col_width{{ .chezmoi.pathListSeparator }} 20     # Optional value. If missing all the screen width is used to calculate column width
                col_padding{{ .chezmoi.pathListSeparator }} 2
                selection_rows{{ .chezmoi.pathListSeparator }} 4
                description_rows{{ .chezmoi.pathListSeparator }} 10
            }
            style{{ .chezmoi.pathListSeparator }} {
                text{{ .chezmoi.pathListSeparator }} green
                selected_text{{ .chezmoi.pathListSeparator }} green_reverse
                description_text{{ .chezmoi.pathListSeparator }} yellow
            }
        }
    ]

    keybindings{{ .chezmoi.pathListSeparator }} [
        {
            name{{ .chezmoi.pathListSeparator }} completion_menu
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} tab
            mode{{ .chezmoi.pathListSeparator }} [emacs vi_normal vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menu name{{ .chezmoi.pathListSeparator }} completion_menu }
                    { send{{ .chezmoi.pathListSeparator }} menunext }
                    { edit{{ .chezmoi.pathListSeparator }} complete }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} ide_completion_menu
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_n
            mode{{ .chezmoi.pathListSeparator }} [emacs vi_normal vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menu name{{ .chezmoi.pathListSeparator }} ide_completion_menu }
                    { send{{ .chezmoi.pathListSeparator }} menunext }
                    { edit{{ .chezmoi.pathListSeparator }} complete }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} history_menu
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_r
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert, vi_normal]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} menu name{{ .chezmoi.pathListSeparator }} history_menu }
        }
        {
            name{{ .chezmoi.pathListSeparator }} help_menu
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} f1
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert, vi_normal]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} menu name{{ .chezmoi.pathListSeparator }} help_menu }
        }
        {
            name{{ .chezmoi.pathListSeparator }} completion_previous_menu
            modifier{{ .chezmoi.pathListSeparator }} shift
            keycode{{ .chezmoi.pathListSeparator }} backtab
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} menuprevious }
        }
        {
            name{{ .chezmoi.pathListSeparator }} next_page_menu
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_x
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} menupagenext }
        }
        {
            name{{ .chezmoi.pathListSeparator }} undo_or_previous_page_menu
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_z
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menupageprevious }
                    { edit{{ .chezmoi.pathListSeparator }} undo }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} escape
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} escape
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} esc }    # NOTE{{ .chezmoi.pathListSeparator }} does not appear to work
        }
        {
            name{{ .chezmoi.pathListSeparator }} cancel_command
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_c
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} ctrlc }
        }
        {
            name{{ .chezmoi.pathListSeparator }} quit_shell
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_d
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} ctrld }
        }
        {
            name{{ .chezmoi.pathListSeparator }} clear_screen
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_l
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} clearscreen }
        }
        {
            name{{ .chezmoi.pathListSeparator }} search_history
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_q
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} searchhistory }
        }
        {
            name{{ .chezmoi.pathListSeparator }} open_command_editor
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_o
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} openeditor }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_up
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} up
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menuup }
                    { send{{ .chezmoi.pathListSeparator }} up }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_down
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} down
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menudown }
                    { send{{ .chezmoi.pathListSeparator }} down }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_left
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} left
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menuleft }
                    { send{{ .chezmoi.pathListSeparator }} left }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_right_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} right
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintcomplete }
                    { send{{ .chezmoi.pathListSeparator }} menuright }
                    { send{{ .chezmoi.pathListSeparator }} right }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_left
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} left
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movewordleft }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_right_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} right
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintwordcomplete }
                    { edit{{ .chezmoi.pathListSeparator }} movewordright }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_start
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} home
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movetolinestart }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_start
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_a
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movetolinestart }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_end_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} end
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintcomplete }
                    { edit{{ .chezmoi.pathListSeparator }} movetolineend }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_end_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_e
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintcomplete }
                    { edit{{ .chezmoi.pathListSeparator }} movetolineend }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_start
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} home
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movetolinestart }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_to_line_end
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} end
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movetolineend }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_up
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_p
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menuup }
                    { send{{ .chezmoi.pathListSeparator }} up }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_down
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_t
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_normal, vi_insert]
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menudown }
                    { send{{ .chezmoi.pathListSeparator }} down }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_character_backward
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} backspace
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspace }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_word_backward
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} backspace
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspaceword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_character_forward
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} delete
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} delete }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_character_forward
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} delete
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} delete }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_character_backward
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_h
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspace }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_word_backward
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_w
            mode{{ .chezmoi.pathListSeparator }} [emacs, vi_insert]
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspaceword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_left
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} backspace
            mode{{ .chezmoi.pathListSeparator }} vi_normal
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} moveleft }
        }
        {
            name{{ .chezmoi.pathListSeparator }} newline_or_run_command
            modifier{{ .chezmoi.pathListSeparator }} none
            keycode{{ .chezmoi.pathListSeparator }} enter
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { send{{ .chezmoi.pathListSeparator }} enter }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_left
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_b
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} menuleft }
                    { send{{ .chezmoi.pathListSeparator }} left }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_right_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_f
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintcomplete }
                    { send{{ .chezmoi.pathListSeparator }} menuright }
                    { send{{ .chezmoi.pathListSeparator }} right }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} redo_change
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_g
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} redo }
        }
        {
            name{{ .chezmoi.pathListSeparator }} undo_change
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_z
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} undo }
        }
        {
            name{{ .chezmoi.pathListSeparator }} paste_before
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_y
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} pastecutbufferbefore }
        }
        {
            name{{ .chezmoi.pathListSeparator }} cut_word_left
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_w
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cutwordleft }
        }
        {
            name{{ .chezmoi.pathListSeparator }} cut_line_to_end
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_k
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cuttoend }
        }
        {
            name{{ .chezmoi.pathListSeparator }} cut_line_from_start
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_u
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cutfromstart }
        }
        {
            name{{ .chezmoi.pathListSeparator }} swap_graphemes
            modifier{{ .chezmoi.pathListSeparator }} control
            keycode{{ .chezmoi.pathListSeparator }} char_t
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} swapgraphemes }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_left
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} left
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movewordleft }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_right_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} right
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintwordcomplete }
                    { edit{{ .chezmoi.pathListSeparator }} movewordright }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_left
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_b
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} movewordleft }
        }
        {
            name{{ .chezmoi.pathListSeparator }} move_one_word_right_or_take_history_hint
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_f
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} {
                until{{ .chezmoi.pathListSeparator }} [
                    { send{{ .chezmoi.pathListSeparator }} historyhintwordcomplete }
                    { edit{{ .chezmoi.pathListSeparator }} movewordright }
                ]
            }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_word_forward
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} delete
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} deleteword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_word_backward
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} backspace
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspaceword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} delete_one_word_backward
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_m
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} backspaceword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} cut_word_to_right
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_d
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cutwordright }
        }
        {
            name{{ .chezmoi.pathListSeparator }} upper_case_word
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_u
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} uppercaseword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} lower_case_word
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_l
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} lowercaseword }
        }
        {
            name{{ .chezmoi.pathListSeparator }} capitalize_char
            modifier{{ .chezmoi.pathListSeparator }} alt
            keycode{{ .chezmoi.pathListSeparator }} char_c
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} capitalizechar }
        }
        # The following bindings with `*system` events require that Nushell has
        # been compiled with the `system-clipboard` feature.
        # This should be the case for Windows, macOS, and most {{ .chezmoi.kernel.ostype }} distributions
        # Not available for example on Android (termux)
        # If you want to use the system clipboard for visual selection or to
        # paste directly, uncomment the respective lines and replace the version
        # using the internal clipboard.
        {
            name{{ .chezmoi.pathListSeparator }} copy_selection
            modifier{{ .chezmoi.pathListSeparator }} control_shift
            keycode{{ .chezmoi.pathListSeparator }} char_c
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} copyselection }
            # event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} copyselectionsystem }
        }
        {
            name{{ .chezmoi.pathListSeparator }} cut_selection
            modifier{{ .chezmoi.pathListSeparator }} control_shift
            keycode{{ .chezmoi.pathListSeparator }} char_x
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cutselection }
            # event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} cutselectionsystem }
        }
        # {
        #     name{{ .chezmoi.pathListSeparator }} paste_system
        #     modifier{{ .chezmoi.pathListSeparator }} control_shift
        #     keycode{{ .chezmoi.pathListSeparator }} char_v
        #     mode{{ .chezmoi.pathListSeparator }} emacs
        #     event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} pastesystem }
        # }
        {
            name{{ .chezmoi.pathListSeparator }} select_all
            modifier{{ .chezmoi.pathListSeparator }} control_shift
            keycode{{ .chezmoi.pathListSeparator }} char_a
            mode{{ .chezmoi.pathListSeparator }} emacs
            event{{ .chezmoi.pathListSeparator }} { edit{{ .chezmoi.pathListSeparator }} selectall }
        }
    ]
}
